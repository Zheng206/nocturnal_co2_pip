test_df %>% filter(test == "mip_60")
test_df %>% filter(test == "mip_60", time > 0)
test_df %>% filter(test == "mip_60")
runApp()
runApp()
runApp()
shiny::runApp()
library(dplyr)
library(stringr)
library(tidyverse)
library(glue)
library(readxl)
library(ggplot2)
library(rlang)
library(DT)
library(broom)
library(ggfortify)
library(kableExtra)
library(corrplot)
library(car)
library(openxlsx)
library(lme4)
library(broom.mixed)
library(glmmLasso)
library(Rwave)
library(igraph)
library(visNetwork)
library(network)
library(shiny)
library(shinythemes)
library(kableExtra)
library(wavethresh)
library(mathjaxr)
library(bslib)
library(bsicons)
library(rsconnect)
source("./co2_function.R")
test_df = read_csv("./data/kaplan_mierer/kaplan_mierer.csv")
test_df$time
test_df
library(dplyr)
library(stringr)
library(tidyverse)
library(glue)
library(readxl)
library(ggplot2)
library(rlang)
library(DT)
library(broom)
library(ggfortify)
library(kableExtra)
library(corrplot)
library(car)
library(openxlsx)
library(lme4)
library(broom.mixed)
library(glmmLasso)
library(Rwave)
library(igraph)
library(visNetwork)
library(network)
library(shiny)
library(shinythemes)
library(kableExtra)
library(wavethresh)
library(mathjaxr)
library(bslib)
library(bsicons)
library(rsconnect)
library(survival)
library(ggsurvfit)
source("./co2_function.R")
total_df = read_csv("./data/data_stream/total_df.csv")
k_means_df = read_csv("./data/clustering/k_means_df.csv")
patients = unique(k_means_df$subject)
patient_list = vector(mode = "list", length = length(patients))
names(patient_list) = patients
for (p in patients){
patient_list[p] = list(k_means_df %>% filter(subject == p) %>% pull(day) %>% as.character())
}
#subject_summary = read_csv("./data/clustering/k_means_df.csv")
#features_df = read_csv("./data/extracted_wavelet_features_RP.csv")
frequency_table = read_csv("./data/wavelet/frequency_table.csv")
frequency_table_mix = k_means_df[c("subject", "day")] %>% left_join(frequency_table, by = c("subject", "day"))
index_df = read_csv("./data/input_index/input_index.csv")
mix_df = read_csv("./data/wavelet/mix_df.csv")
# Wavelet Module Data
wave_features = colnames(k_means_df)[grepl("_level_", colnames(k_means_df))]
# Mixed Model Data
#mix_df = subject_summary %>% group_by(subject, visit) %>% summarise_if(is.numeric, mean, na.rm = TRUE) %>% ungroup()
#mix_df= mix_df[,apply(mix_df, 2, function(col) { length(unique(col)) > 1 })]
#
wavelet_features = colnames(mix_df)[which(grepl("level", colnames(mix_df)))]
wavelet_features = wavelet_features[which(!grepl("*_13$|*_12$|*_11$|*_10$", wavelet_features))]
PCO2_thre = c(45, 50)
outcomes = c("fvc", "mip")
input_df = expand_grid(outcomes, PCO2_thre)
input_df = input_df %>% mutate(lambda = case_when(outcomes == "fvc" ~ 165,
outcomes == "mip" ~ 290))
input_df_wv = input_df %>% dplyr::select(outcomes, lambda) %>% distinct()
result_table = lapply(1:nrow(input_df_wv), function(i){
mix_model(input_df_wv[[i, "outcomes"]], thre = 45, mix_df, type = "wavelet", lambda = input_df_wv[[i, "lambda"]], features = wavelet_features)[[1]]
}) %>% bind_rows()
result_table
input_df_wv
wavelet_features
input_df_wv[[i, "outcomes"]]
i = 1
input_df_wv[[i, "outcomes"]]
input_df_wv[[i, "lambda"]]
mix_model(input_df_wv[[i, "outcomes"]], thre = 45, mix_df, type = "wavelet", lambda = input_df_wv[[i, "lambda"]], features = wavelet_features)
mix_model(input_df_wv[[i, "outcomes"]], thre = 45, df = mix_df, type = "wavelet", lambda = input_df_wv[[i, "lambda"]], features = wavelet_features)
df = mix_df
lambda = input_df_wv[[i, "lambda"]]
features = wavelet_features
formula = paste0(outcome,  " ~ ", paste(features, collapse = " + "))
mix_model(outcome = input_df_wv[[i, "outcomes"]], thre = 45, df = mix_df, type = "wavelet", lambda = input_df_wv[[i, "lambda"]], features = wavelet_features)
outcome = input_df_wv[[i, "outcomes"]]
formula = paste0(outcome,  " ~ ", paste(features, collapse = " + "))
model = glmmLasso(as.formula(formula),
rnd = list(subject=~1),
family = gaussian(link = "identity"),
data = df,
lambda = lambda,
switch.NR = TRUE,
final.re = TRUE)
library(dplyr)
library(stringr)
library(tidyverse)
library(glue)
library(readxl)
library(ggplot2)
library(rlang)
library(DT)
library(broom)
library(ggfortify)
library(kableExtra)
library(corrplot)
library(car)
library(openxlsx)
library(lme4)
library(broom.mixed)
library(glmmLasso)
library(Rwave)
library(igraph)
library(visNetwork)
library(network)
library(shiny)
library(shinythemes)
library(kableExtra)
library(wavethresh)
library(mathjaxr)
library(bslib)
library(bsicons)
library(rsconnect)
library(survival)
library(ggsurvfit)
source("./co2_function.R")
#patients = c("HYP01", "HYP02", "HYP04", "HYP06", "HYP07", "HYP08", "HYP09",
#             "HYP10", "HYP11", "HYP12", "HYP13", "UPENN01", "UPENN04")
#
#patient_list = list(
#  "HYP01" = c("2022-05-26", "2022-05-27", "2022-05-28", "2022-09-08", "2022-09-09",
#              "2022-09-10", "2023-01-05", "2023-01-07", "2023-04-13", "2023-04-15"),
#  "HYP02" = c("2022-10-28", "2023-02-09", "2023-02-12"),
#  "HYP04" = c("2022-07-21", "2022-07-22", "2023-03-03", "2023-03-04", "2023-03-05"),
#  "HYP06" = c("2022-08-02","2022-08-03", "2022-08-04"),
#  "HYP07" = c("2022-08-11", "2022-08-12", "2022-08-13", "2022-12-07", "2022-12-08"),
#  "HYP08" = c("2022-08-11", "2022-08-12", "2022-08-13", "2022-12-08", "2022-12-09", "2022-12-10",
#              "2023-03-30", "2023-03-31", "2023-04-01"),
#  "HYP09" = c("2022-08-17", "2022-08-18", "2022-08-19", "2022-12-19", "2022-12-21"),
#  "HYP10" = c("2022-08-25", "2022-08-27", "2022-12-15"),
#  "HYP11" = c("2022-09-21", "2022-09-22"),
#  "HYP12" = c("2022-10-18", "2022-10-19", "2022-10-20"),
#  "HYP13" = c("2023-03-02", "2023-03-03", "2023-03-04"),
#  "UPENN01" = c("2022-09-19", "2022-09-20", "2022-12-16", "2022-12-18", "2023-03-18",
#                "2023-03-19", "2023-03-20"),
#  "UPENN04" = c("2023-02-23", "2023-02-24", "2023-02-25")
#)
#
#
#patient_v = c("HYP01", "HYP02", "HYP04", "HYP06", "HYP07", "HYP08", "HYP09", "HYP10", "HYP11",
#              "HYP12", "HYP13", "UPENN01", "UPENN04")
total_df = read_csv("./data/data_stream/total_df.csv")
k_means_df = read_csv("./data/clustering/k_means_df.csv")
patients = unique(k_means_df$subject)
patient_list = vector(mode = "list", length = length(patients))
names(patient_list) = patients
for (p in patients){
patient_list[p] = list(k_means_df %>% filter(subject == p) %>% pull(day) %>% as.character())
}
#subject_summary = read_csv("./data/clustering/k_means_df.csv")
#features_df = read_csv("./data/extracted_wavelet_features_RP.csv")
frequency_table = read_csv("./data/wavelet/frequency_table.csv")
frequency_table_mix = k_means_df[c("subject", "day")] %>% left_join(frequency_table, by = c("subject", "day"))
index_df = read_csv("./data/input_index/input_index.csv")
mix_df = read_csv("./data/wavelet/mix_df.csv")
# Wavelet Module Data
wave_features = colnames(k_means_df)[grepl("_level_", colnames(k_means_df))]
# Mixed Model Data
#mix_df = subject_summary %>% group_by(subject, visit) %>% summarise_if(is.numeric, mean, na.rm = TRUE) %>% ungroup()
#mix_df= mix_df[,apply(mix_df, 2, function(col) { length(unique(col)) > 1 })]
#
wavelet_features = colnames(mix_df)[which(grepl("level", colnames(mix_df)))]
wavelet_features = wavelet_features[which(!grepl("*_13$|*_12$|*_11$|*_10$", wavelet_features))]
wavelet_features
PCO2_thre = c(45, 50)
outcomes = c("fvc", "mip")
input_df = expand_grid(outcomes, PCO2_thre)
input_df = input_df %>% mutate(lambda = case_when(outcomes == "fvc" ~ 165,
outcomes == "mip" ~ 290))
mix_model(outcome = input_df_wv[[i, "outcomes"]], thre = 45, df = mix_df, type = "wavelet", lambda = input_df_wv[[i, "lambda"]], features = wavelet_features)
as.formula(formula)
glmmLasso(as.formula(formula),
rnd = list(subject=~1),
family = gaussian(link = "identity"),
data = df,
lambda = lambda,
switch.NR = TRUE,
final.re = TRUE)
mix_df
# Wavelet Module Data
mix_df$subject = as.factor(mix_df$subject)
lapply(1:nrow(input_df_wv), function(i){
mix_model(outcome = input_df_wv[[i, "outcomes"]], thre = 45, df = mix_df, type = "wavelet", lambda = input_df_wv[[i, "lambda"]], features = wavelet_features)[[1]]
}) %>% bind_rows()
View(mix_df)
df = mix_df
glmmLasso(as.formula(formula),
rnd = list(subject=~1),
family = gaussian(link = "identity"),
data = df,
lambda = lambda,
switch.NR = TRUE,
final.re = TRUE)
is.na(mix_df)
sum(is.na(mix_df))
View(mix_df)
str(mix_df)
source("../R/co2_function.R")
lapply(1:nrow(input_df_wv), function(i){
mix_model(outcome = input_df_wv[[i, "outcomes"]], thre = 45, df = mix_df, type = "wavelet", lambda = input_df_wv[[i, "lambda"]], features = wavelet_features)[[1]]
}) %>% bind_rows()
mix_df
mix_df[,apply(mix_df, 2, function(col) { length(unique(col)) > 1 })]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
total_Df
total_df
total_df = read_csv("./data/data_stream/total_df.csv")
k_means_df = read_csv("./data/clustering/k_means_df.csv")
patients = unique(k_means_df$subject)
patient_list = vector(mode = "list", length = length(patients))
names(patient_list) = patients
for (p in patients){
patient_list[p] = list(k_means_df %>% filter(subject == p) %>% pull(day) %>% as.character())
}
subject_summary = read_csv("./data/wavelet/subject_summary.csv")
features_df = read_csv("./data/wavelet/features_df.csv")
frequency_table = read_csv("./data/wavelet/frequency_table.csv")
frequency_table_mix = k_means_df[c("subject", "day")] %>% left_join(frequency_table, by = c("subject", "day"))
index_df = read_csv("./data/input_index/input_index.csv")
mix_df = read_csv("./data/wavelet/mix_df.csv")
sub_df = total_df %>% filter(subject == as.character("HYP01"), day == as.character("2023-01-05"))
sub_df
base_line = k_means_df %>% filter(subject == as.character("HYP01"), day == as.character("2023-01-05")) %>% pull(spot_co2)
base_line
legend_df = data.frame(group = c("Spot CO2", "PCO2 Threshold"), yintercept = c(base_line, 50))
legend_df
ggplot() +
geom_line(data = sub_df , aes(x = as.numeric(time), y = PCO2_DC)) +
geom_rect(data = index_df %>% filter(subject == as.character(input$patient), day == as.character(input$night)), mapping = aes(xmin = as.numeric(xmin), xmax = as.numeric(xmax), ymin = as.numeric(ymin), ymax = as.numeric(ymax)), fill = "red", alpha = 0.2) +
geom_hline(data = legend_df, aes(yintercept = yintercept, color = group), linetype = "dashed") +
labs(x = "Time", y = "PCO2") +
guides(color = guide_legend(title = "PCO2 Levels"))
ggplot() +
geom_line(data = sub_df , aes(x = as.numeric(time), y = PCO2_DC)) +
geom_rect(data = index_df %>% filter(subject == as.character("HYP01"), day == as.character("2023-01-05")), mapping = aes(xmin = as.numeric(xmin), xmax = as.numeric(xmax), ymin = as.numeric(ymin), ymax = as.numeric(ymax)), fill = "red", alpha = 0.2) +
geom_hline(data = legend_df, aes(yintercept = yintercept, color = group), linetype = "dashed") +
labs(x = "Time", y = "PCO2") +
guides(color = guide_legend(title = "PCO2 Levels"))
runApp()
k_means_df
k_means_df %>% filter(subject == "HYP07")
shiny::runApp()
library(dplyr)
library(stringr)
library(tidyverse)
library(glue)
library(readxl)
library(ggplot2)
library(rlang)
library(DT)
library(broom)
library(ggfortify)
library(kableExtra)
library(corrplot)
library(car)
library(openxlsx)
library(lme4)
library(broom.mixed)
library(glmmLasso)
library(Rwave)
library(igraph)
library(visNetwork)
library(network)
library(shiny)
library(shinythemes)
library(kableExtra)
library(wavethresh)
library(mathjaxr)
library(bslib)
library(bsicons)
library(rsconnect)
library(survival)
library(ggsurvfit)
source("./co2_function.R")
#patients = c("HYP01", "HYP02", "HYP04", "HYP06", "HYP07", "HYP08", "HYP09",
#             "HYP10", "HYP11", "HYP12", "HYP13", "UPENN01", "UPENN04")
#
#patient_list = list(
#  "HYP01" = c("2022-05-26", "2022-05-27", "2022-05-28", "2022-09-08", "2022-09-09",
#              "2022-09-10", "2023-01-05", "2023-01-07", "2023-04-13", "2023-04-15"),
#  "HYP02" = c("2022-10-28", "2023-02-09", "2023-02-12"),
#  "HYP04" = c("2022-07-21", "2022-07-22", "2023-03-03", "2023-03-04", "2023-03-05"),
#  "HYP06" = c("2022-08-02","2022-08-03", "2022-08-04"),
#  "HYP07" = c("2022-08-11", "2022-08-12", "2022-08-13", "2022-12-07", "2022-12-08"),
#  "HYP08" = c("2022-08-11", "2022-08-12", "2022-08-13", "2022-12-08", "2022-12-09", "2022-12-10",
#              "2023-03-30", "2023-03-31", "2023-04-01"),
#  "HYP09" = c("2022-08-17", "2022-08-18", "2022-08-19", "2022-12-19", "2022-12-21"),
#  "HYP10" = c("2022-08-25", "2022-08-27", "2022-12-15"),
#  "HYP11" = c("2022-09-21", "2022-09-22"),
#  "HYP12" = c("2022-10-18", "2022-10-19", "2022-10-20"),
#  "HYP13" = c("2023-03-02", "2023-03-03", "2023-03-04"),
#  "UPENN01" = c("2022-09-19", "2022-09-20", "2022-12-16", "2022-12-18", "2023-03-18",
#                "2023-03-19", "2023-03-20"),
#  "UPENN04" = c("2023-02-23", "2023-02-24", "2023-02-25")
#)
#
#
#patient_v = c("HYP01", "HYP02", "HYP04", "HYP06", "HYP07", "HYP08", "HYP09", "HYP10", "HYP11",
#              "HYP12", "HYP13", "UPENN01", "UPENN04")
total_df = read_csv("./data/data_stream/total_df.csv")
k_means_df = read_csv("./data/clustering/k_means_df.csv")
patients = unique(k_means_df$subject)
patient_list = vector(mode = "list", length = length(patients))
names(patient_list) = patients
for (p in patients){
patient_list[p] = list(k_means_df %>% filter(subject == p) %>% pull(day) %>% as.character())
}
subject_summary = read_csv("./data/wavelet/subject_summary.csv")
features_df = read_csv("./data/wavelet/features_df.csv")
frequency_table = read_csv("./data/wavelet/frequency_table.csv")
frequency_table_mix = k_means_df[c("subject", "day")] %>% left_join(frequency_table, by = c("subject", "day"))
index_df = read_csv("./data/input_index/input_index.csv")
mix_df = read_csv("./data/wavelet/mix_df.csv")
# Wavelet Module Data
wave_features = colnames(features_df)[-c(1:2)]
wave_features = sapply(wave_features, function(x) gsub(" ", "_", x), USE.NAMES = FALSE)
colnames(features_df) = c(colnames(features_df)[1:2], wave_features)
# Mixed Model Data
mix_df = subject_summary %>% left_join(features_df, by = c("subject", "day")) %>% na.omit() %>% group_by(subject, visit) %>% summarise_if(is.numeric, mean, na.rm = TRUE) %>% ungroup()
mix_df= mix_df[,apply(mix_df, 2, function(col) { length(unique(col)) > 1 })]
wavelet_features = colnames(mix_df)[grepl("_level_", colnames(mix_df))]
wavelet_features = wavelet_features[which(!grepl("*_13$|*_12$|*_11$|*_10$", wavelet_features))]
mix_df[wavelet_features] = scale(mix_df[wavelet_features], center = TRUE, scale = TRUE)
mix_df$subject = as.factor(mix_df$subject)
PCO2_thre = c(45, 50)
outcomes = c("fvc", "mip")
input_df = expand_grid(outcomes, PCO2_thre)
input_df = input_df %>% mutate(lambda = case_when(outcomes == "fvc" ~ 165,
outcomes == "mip" ~ 290))
# Hierarchical Clustering
alsfrs_input = expand_grid(type = c("alsfrs_10", "alsfrs_11"), subject_status = c("Abnormal", "Normal"))
alsfrs_df = lapply(1:nrow(alsfrs_input), function(i){
df = data.frame(table(k_means_df %>% filter(cluster_patient == alsfrs_input[[i, "subject_status"]]) %>% pull(alsfrs_input[[i, "type"]])))
colnames(df) = c("alsfrs", "count")
df$subject_status = alsfrs_input[[i, "subject_status"]]
df$type = alsfrs_input[[i, "type"]]
return(df)}) %>% bind_rows()
alsfrs_df$alsfrs = factor(alsfrs_df$alsfrs, levels = c("0", "1", "2", "3", "4"))
#k_means_df = subject_summary %>% dplyr::select(c(1:33, 331:335))
k_means_df = lapply(unique(k_means_df$subject), function(x){
sub_df = k_means_df %>% filter(subject == x) %>% arrange(day)
sub_df = sub_df %>% mutate(visit_time = as.numeric(day - sub_df$day[1]), .after = visit)
return(sub_df)
}) %>% bind_rows()
num_df = k_means_df %>% group_by(subject, visit) %>% summarize(across(where(is.numeric), mean)) %>% ungroup()
cha_df = k_means_df %>% dplyr::select(subject, visit, cluster_night, cluster_visit, cluster_patient) %>% distinct()
cluster_df = num_df %>% left_join(cha_df, by = c("subject", "visit"))
p_ex = cluster_df %>% group_by(subject) %>% summarize(count = n()) %>% filter(count == 1) %>% pull(subject)
subject_cluster_df = k_means_df[c("subject", "cluster_patient")] %>% distinct() %>% arrange(cluster_patient)
#
#evl_mip_df = cluster_df[c("cluster_visit", "mip_label")] %>% mutate(evaluation = case_when(mip_label == "abnormal" & cluster_visit == mip_label ~ "TP",
#                                                                                                mip_label == "normal" & cluster_visit == mip_label ~ "TN",
#                                                                                                mip_label == "abnormal" & cluster_visit != mip_label ~ "FN",
#                                                                                                mip_label == "normal" & cluster_visit != mip_label ~ "FP")) %>% group_by(evaluation) %>% summarize(count = n())
#
#sensitivity_mip = evl_mip_df[[which(evl_mip_df$evaluation == "TP"), "count"]]/(evl_mip_df[[which(evl_mip_df$evaluation == "TP"), "count"]] + evl_mip_df[[which(evl_mip_df$evaluation == "FN"), "count"]])
#specificity_mip = evl_mip_df[[which(evl_mip_df$evaluation == "TN"), "count"]]/(evl_mip_df[[which(evl_mip_df$evaluation == "TN"), "count"]] + evl_mip_df[[which(evl_mip_df$evaluation == "FP"), "count"]])
#evl_standard_df = cluster_df[c("cluster_visit", "standard_label")] %>% mutate(evaluation = case_when(standard_label == "abnormal" & cluster_visit == standard_label ~ "TP",
#                                                                                                     standard_label == "normal" & cluster_visit == standard_label ~ "TN",
#                                                                                                     standard_label == "abnormal" & cluster_visit != standard_label ~ "FN",
#                                                                                                     standard_label == "normal" & cluster_visit != standard_label ~ "FP")) %>% group_by(evaluation) %>% summarize(count = n())
#
#sensitivity_standard = evl_standard_df[[which(evl_standard_df$evaluation == "TP"), "count"]]/(evl_standard_df[[which(evl_standard_df$evaluation == "TP"), "count"]] + evl_standard_df[[which(evl_standard_df$evaluation == "FN"), "count"]])
#specificity_standard = evl_standard_df[[which(evl_standard_df$evaluation == "TN"), "count"]]/(evl_standard_df[[which(evl_standard_df$evaluation == "TN"), "count"]] + evl_standard_df[[which(evl_standard_df$evaluation == "FP"), "count"]])
# Simulation Preparation
#sim_summary = read_csv("./data/subject_summary_20230510.csv")
#colnames(features_df) = sapply(colnames(features_df), function(x) gsub(" ", "_", x), USE.NAMES = FALSE)
#sim_df = sim_summary %>% na.omit() %>% left_join(features_df, by = c("subject", "day"))
#sim_df= sim_df[,apply(sim_df, 2, function(col) { length(unique(col)) > 1 })]
#features = colnames(sim_df)[which(grepl("level", colnames(sim_df)))]
#info = read_csv("./data/info.csv") %>% na.omit() %>% filter(period == ">= 4 hours") %>% dplyr::select(subject, visit, day)
#info$day = as.Date(as.POSIXct(info$day, format = "%m/%d/%y"))
#sim_df = info %>% dplyr::select(subject, day) %>% left_join(sim_df, by = c("subject", "day"))
feature_illustration = colnames(k_means_df)[c(5:10, 12:29, 33:36)]
# Subject level test
sig_result_subject = lapply(feature_illustration, function(y){
cluster_df = k_means_df %>% group_by(subject) %>% summarise_if(is.numeric, mean, na.rm = TRUE) %>% ungroup()
cluster_df = cluster_df %>% left_join(k_means_df %>% dplyr::select(subject, cluster_patient) %>% distinct(), by = c("subject"))
sig_df = cluster_test(y, cluster_df, label = "cluster_patient", type = "subject")
return(sig_df)
}) %>% bind_rows()
sig_result_subject$p.adj = p.adjust(as.numeric(sig_result_subject$p.value), n = length(sig_result_subject$p.value), method = "fdr")
sig_result_table_subject = sig_result_subject %>% mutate(p.value = sprintf("%.3f", p.value),
p.adj = sprintf("%.3f", p.adj),
sig.adj = case_when(p.adj < 0.1 & p.adj >= 0.05 ~ ".",
p.adj < 0.05 & p.adj >= 0.01 ~ "*",
p.adj < 0.01 & p.adj >= 0.001 ~ "**",
p.adj < 0.001 ~ "***",
.default = NA),
estimate = sprintf("%.2f", estimate))
# Visit level test
sig_result_visit = lapply(feature_illustration, function(y){
cluster_df = k_means_df %>% group_by(subject, visit) %>% summarise_if(is.numeric, mean, na.rm = TRUE) %>% ungroup()
cluster_df = cluster_df %>% left_join(k_means_df %>% dplyr::select(subject, visit, cluster_visit) %>% distinct(), by = c("subject", "visit"))
sig_df = cluster_test(y, cluster_df, label = "cluster_visit", type = "visit")
return(sig_df)
}) %>% bind_rows()
sig_result_visit$p.adj = p.adjust(as.numeric(sig_result_visit$p.value), n = length(sig_result_visit$p.value), method = "fdr")
sig_result_table_visit = sig_result_visit %>% mutate(p.value = sprintf("%.3f", p.value),
p.adj = sprintf("%.3f", p.adj),
sig.adj = case_when(p.adj < 0.1 & p.adj >= 0.05 ~ ".",
p.adj < 0.05 & p.adj >= 0.01 ~ "*",
p.adj < 0.01 & p.adj >= 0.001 ~ "**",
p.adj < 0.001 ~ "***",
.default = NA),
estimate = sprintf("%.2f", estimate))
# Night level test
sig_result_night = lapply(feature_illustration, function(y){
sig_df = cluster_test(y, k_means_df, label = "cluster_night", type = "night")
return(sig_df)
}) %>% bind_rows()
sig_result_night$p.adj = p.adjust(as.numeric(sig_result_night$p.value), n = length(sig_result_night$p.value), method = "fdr")
sig_result_table_night = sig_result_night %>% mutate(p.value = sprintf("%.3f", p.value),
p.adj = sprintf("%.3f", p.adj),
sig.adj = case_when(p.adj < 0.1 & p.adj >= 0.05 ~ ".",
p.adj < 0.05 & p.adj >= 0.01 ~ "*",
p.adj < 0.01 & p.adj >= 0.001 ~ "**",
p.adj < 0.001 ~ "***",
.default = NA),
estimate = sprintf("%.2f", estimate))
test_df = read_csv("./data/kaplan_mierer/kaplan_mierer.csv")
test_df$test = factor(test_df$test, levels = c("fvc_50", "mip_60", "pco2_45", "spo2_88", "pco2_50.10", "delta_pco2_event", "delta_pco2_50_event", "nocturnal_test"),
labels = c("FVC < 50%", "MIP < 60cm H20", "Nocturnal CO2 >45mmHg for >5mins", "SpO2 ≤88% for ≥5mins",
"Nocturnal CO2 >50mmHg for >10mins", ">10mmHg Increase from baseline CO2 for >10mins",
">10mmHg Increase from baseline CO2 to >50mmHg for >10mins", "Nocturnal PCO2 Test"))
event_summary = read_csv("./data/abnormal_summary/event_summary.csv")
event_summary = event_summary %>% dplyr::select(event, abnormal, normal) %>% mutate(Notes = case_when(
event == "event_45" ~ "PCO2 > 45 mmHg for > 5 mins",
event == "event_50" ~ "PCO2 > 50 mmHg for > 5 mins",
event == "event_45.10" ~ "PCO2 > 45 mmHg for > 10 mins",
event == "event_50.10" ~ "PCO2 > 50 mmHg for > 10 mins",
event == "event_spo2" ~ "SpO2 < 88% for > 5 mins",
event == "delta_pco2_event" ~ "PCO2 > 10 mmHg increase from baseline for > 10 mins (cumulatively)",
event == "delta_pco2_50_event" ~ "PCO2 > 10 mmHg increase from baseline to above 50 mmHg for > 10 mins (cumulatively)"
))
time_summary = read_csv("./data/abnormal_summary/time_summary.csv")
time_summary = time_summary %>% dplyr::select(period, abnormal, normal) %>% mutate(Notes = case_when(
period == "PCO2.45" ~ "PCO2 > 45 mmHg for > 5 mins",
period == "PCO2.50" ~ "PCO2 > 50 mmHg for > 5 mins",
period == "PCO2.45.10" ~ "PCO2 > 45 mmHg for > 10 mins",
period == "PCO2.50.10" ~ "PCO2 > 50 mmHg for > 10 mins",
period == "SpO2.88" ~ "SpO2 < 88% for > 5 mins",
period == "delta_pco2_time" ~ "PCO2 > 10 mmHg increase from baseline for > 10 mins (cumulatively)",
period == "delta_pco2_50_time" ~ "PCO2 > 10 mmHg increase from baseline to above 50 mmHg for > 10 mins (cumulatively)"
)) %>% rename("time" = "period", "abnormal" = "abnormal", "normal" = "normal")
event_n = event_summary$Notes
sub_df = total_df %>% filter(subject == "HYP07", day == as.character("2023-03-16"))
base_line = k_means_df %>% filter(subject == as.character("HYP07"), day == as.character(2023-03-16")) %>% pull(spot_co2)
base_line = k_means_df %>% filter(subject == as.character("HYP07"), day == as.character("2023-03-16")) %>% pull(spot_co2)
base_line
legend_df = data.frame(group = c("Spot CO2", "PCO2 Threshold"), yintercept = c(base_line, 50))
legend_df
ggplot() +
geom_line(data = sub_df , aes(x = as.numeric(time), y = PCO2_DC)) +
geom_rect(data = index_df %>% filter(subject == as.character("HYP07"), day == as.character("2023-03-16")), mapping = aes(xmin = as.numeric(xmin), xmax = as.numeric(xmax), ymin = as.numeric(ymin), ymax = as.numeric(ymax)), fill = "red", alpha = 0.2) +
geom_hline(data = legend_df, aes(yintercept = yintercept, color = group), linetype = "dashed") +
labs(x = "Time", y = "PCO2") +
guides(color = guide_legend(title = "PCO2 Levels"))
runApp()
